Состояние Форт-системы представлено стеками, областями памяти и системными переменными, заключёнными в структуре forth_t F, определённой в forth.c и доступной хост-программе по имени forth.


Стеки - состоят из памяти, выделенной под стек, и указателя стека. Память выделяется статически и её размер настраивается на этапе компиляции. При работе со стеками контролируется переполнение или исчерпание стеков.

1. Стек данных - служит для передачи параметров между словами. Элемент стека - int.
2. Стек возвратов - служит для сохранения точек возврата из вызываемых определений. Элемент стека - запись из 2 полей: адреса кода и токена вызывающего определения.
3. Стек циклов со счётчиком - служит для хранения информации о выполняемых в данный момент циклах со счётчиком. Элемент стека - запись со следующими полями:
   - текущее значение счётчика - int
   - конечное значение счётчика - int
   - токен определения, содержащего цикл - служит для автоматического выхода из всех циклов текущего определения при выполнении слова EXIT в теле цикла
   - адрес досрочного выхода из цикла - адрес следующей ячейки в области кода за циклом - служит для выхода из текущего цикла при выполнении слова LEAVE
4. Стек структур управления - служит для контроля вложенности структур управления при компиляции определения. Элемент стека - запись с полями:
   - идентификатор структуры управления или её части (соответствуют словам управления выполнением программы: IF, THEN, ELSE, BEGIN и т.д.)
   - адрес неразрешённой ссылки в коде


Области памяти - состоят из статически выделенной памяти, размер которой настраивается на этапе компиляции, и указателя начала свободного места. Области памяти последовательно заполняются от начала к концу (от младших адресов к старшим), при этом контролируется переполнение областей. Каждая область образует отдельное адресное пространство и адресуется целым положительным числом. В любой области, кроме области имён, 0 считается недопустимым адресом и служит для обозначения отсутствия значения или для индикации ошибки.

1. Область данных - массив байт, предназначенный для хранения данных, обрабатываемых программой на Форте. Адресация - побайтовая. Чтение и запись ячеек производится без выравнивания. Слова работы с памятью (@, !, HERE, ALLOT и пр.) работают с этой областью. К области данных может получить доступ хост-программа для обмена данными с программой на Форте.

2. Область кода - массив ячеек, предназначенный для хранения тел слов. Адресация - поячеечная. Тело слова состоит из ячейки с номером примитива и, возможно, нескольких ячеек с параметрами слова. Токеном слова, позволяющим выполнить его словом EXECUTE, является адрес ячейки в области кода с номером примитива. В частности, определения через двоеточие представлены ячейкой с номером примитива ENTER, за которой следуют ячейки с токенами вызываемых слов, завершающиеся ячейкой с токеном слова EXIT.

3. Словарь - служит для хранения соответствия имён слов их флагам и токенам. Адресация - поструктурная. В словарь последовательно заносятся структуры со следующими полями:
   - поле связи - адрес предыдущей записи в словаре
   - токен слова - адрес тела слова в области кода
   - адрес названия слова - смещение в области имён до начала названия текущего слова
   - флаги слова - 1 байт, используются флаги немедленного исполнения и сокрытия при поиске

4. Область имён - содержит названия слов - строки переменной длины, завершающиеся нулевым байтом. Адресация - побайтовая.


Системные переменные содержат состояние Форт-системы, адресного и текстового интерпретатора:
   - errormsg - строка с сообщением о последней ошибке
   - errjmp - последний контекст обработки ошибки (для перехода с пом. функции longjmp() при возникновении ошибки)
   - errhandlers - количество установленных контекстов обработки ошибок (если 0, то вместо longjmp() вызывается abort())
   - app_prims - адрес функции, реализующей примитивы хост-программы
   - app_notfound - адрес функции, реализующей обработку литералов и слов, не распознанных текстовым интерпретатором
   - ip - указатель адресного интерпретатора, содержит адрес следующего токена в области кода, который будет выполняться
   - running - токен текущего выполняемого определения
   - state - состояние Форт-системы, 0 - интерпретация, -1 - компиляция
   - source - указатель на интерпретируемый в данный момент исходный текст
   - intp - указатель текстового интерпретатора, смещение в символах от начала исходного текста
   - word - область для последнего выделенного из исходного текста слова (размер области настраивается на этапе компиляции)
   - context - адрес поля параметров контекстного словаря (с которого начинается поиск слов) в области кода
   - current - адрес поля параметров текущего словаря (в который добавляются новые слова) в области кода
   - forth_voc - адрес поля параметров словаря FORTH в области кода
   - *_xt - токены слов-примитивов, применяемые компилирующими словами-примитивами


Обработка ошибок основана на паре стандартных функций языка Си - setjmp()/longjmp(). Ряд функций API Форт-системы устанавливает адрес перехода при возникновении ошибки функцией setjmp(). Если при выполнении программы на Форте возникает ошибка, то управление функцией longjmp() передаётся функции setjmp() в последнюю функцию API, установившую адрес перехода, которая возвращает ненулевое значение. После этого хост-программа может получить информацию о возникшей ошибке и месте её возникновения, сбросить Форт-систему и продолжить или завершить выполнение.

Если ошибка возникает вне функций API, отлавливающих ошибки (например, при вызове fth_pop() в main() при пустом стеке), то вызывается функция abort().

В программе на Форте есть возможность перехвата возникающих ошибок словом TRY. Оно выполняет указанное за ним слово и при отсутствии ошибок помещает на вершину стека логическое значение ИСТИНА. При возникновении ошибки глубина стека данных восстанавливается до значения перед выполнением указанного слова (при этом элементы стека могут не соответствовать элементам стека до выполнения слова) и на вершину стека помещается логическое значение ЛОЖЬ.


Все строки в Форт-системе являются ASCII-строками с завершающим 0. При разборе исходного текста применяется два алгоритма - алгоритм выделения слова и алгоритм выделения строки.

Алгоритм выделения слова пропускает все указанные разделители и выделяет слово до следующего разделителя, который тоже пропускается. Выделенное слово помещается в служебную область word. Если слово больше области word, то оно усекается. При использовании слова WORD выделенное слово компилируется в свободную часть области данных как строка без перемещения указателя области данных. Экранирование символа разделителя и escape-последовательности отсутствует.

Алгоритм выделения строки начинает сканирование исходного текста с текущей позиции указателя текстового интерпретатора до первого вхождения неэкранированного символа-разделителя. Экранирование символов осуществляется сиволом обратной косой черты (\). Выделенная строка алгоритмом никуда не копируется, осуществляется только определение её границ в исходном тексте. Слова, выделяющие строки (" и STRING) компилируют выделенную строку в область данных с нулевым байтом в конце, распознавая и заменяя escape-последовательности.

Строка, скомпилированная в область данных, представляется в программе на Форте в виде адреса первого символа. Её длина определяется словом LENGTH.


Реализация различных структур и типов данных.

Константа:
   - в области кода: ячейка с примитивом константы ("положить содержимое следующей ячейки на стек") и ячейка со значением

Переменная и CREATEd слова:
   - в области кода - ячейка с примитивом константы, адрес ячейки в области данных, содержащей значение переменной, и адрес DOES>-части в области кода для текущего объекта (сам шитый код, без номера примитива)
   - в области данных - ячейка со значением переменной

VALUE:
   - в области кода - ячейка с примитивом величины ("положить на стек содержимое ячейки в области данных, на которую указывает содержимое следующей ячейки в области кода") и адрес ячейки в области данных, содержащей значение величины
   - в области данных - ячейка со значением величины

Словарь:
   - в области кода - ячейка с примитивом словаря ("занести в переменную context адрес следующей ячейки"), ячейка с адресом в области имён последнего определённого слова в этом словаре и ячейка с адресом поля параметров базового словаря (в котором будет продолжен поиск, если искомое слово в текущем словаре не будет найдено)


Слово DOES> работает и в режиме интерпретации. В этом случае оно изменяет семантику выполнения только для последнего определённого слова.


Слово CHAR является словом немедленного исполнения: в режиме интерпретации оно работает как обычно, а в режиме компиляции - как [CHAR] (аналогично слову ASCII из старых реализаций).


Текущая система счисления не фиксируется, литералы распознаются в десятичной системе, если для них не указан префикс, и в 16-ричной, если они начинаются с 0x или 0X (как беззнаковые).

